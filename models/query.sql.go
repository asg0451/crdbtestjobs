// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const finishJob = `-- name: FinishJob :one
UPDATE jobs SET completed_at = CURRENT_TIMESTAMP, completed_by = $2 WHERE id = $1 RETURNING id, name, created_at, completed_at, completed_by
`

type FinishJobParams struct {
	ID          pgtype.UUID `json:"id"`
	CompletedBy pgtype.Text `json:"completed_by"`
}

func (q *Queries) FinishJob(ctx context.Context, db DBTX, arg FinishJobParams) (Job, error) {
	row := db.QueryRow(ctx, finishJob, arg.ID, arg.CompletedBy)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.CompletedBy,
	)
	return i, err
}

const getJob = `-- name: GetJob :one
SELECT id, name, created_at, completed_at, completed_by FROM jobs where completed_at IS NULL limit 1 for update skip locked
`

func (q *Queries) GetJob(ctx context.Context, db DBTX) (Job, error) {
	row := db.QueryRow(ctx, getJob)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.CompletedBy,
	)
	return i, err
}
